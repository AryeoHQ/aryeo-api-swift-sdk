//
// UnconfirmedAppointment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An unconfirmed appointment. */
public struct UnconfirmedAppointment: Codable {

    public enum PreferenceType: String, Codable, CaseIterable {
        case asap = "ASAP"
        case time = "TIME"
        case timeOfDay = "TIME_OF_DAY"
    }
    public enum PreferredStartAtTimeOfDay: String, Codable, CaseIterable {
        case morning = "MORNING"
        case afternoon = "AFTERNOON"
        case twilight = "TWILIGHT"
    }
    /** The ID of the appointment. */
    public private(set) var id: UUID
    /** The title of the appointment. */
    public private(set) var title: String?
    /** The multi-line description of the appointment. */
    public private(set) var description: String?
    public private(set) var order: Order?
    /** Users attached to the appointment. */
    public private(set) var users: [User]?
    /** The type of preferred scheduling information provided by a customer to aid in scheduling this appointment. */
    public private(set) var preferenceType: PreferenceType?
    /** A preferred date and time (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME.  */
    public private(set) var preferredStartAt: Date?
    /** A preferred date (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY.  */
    public private(set) var preferredStartAtDay: Date?
    /** A preferred time of day for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY.  */
    public private(set) var preferredStartAtTimeOfDay: PreferredStartAtTimeOfDay?
    /** The estimated length of the appointment in minutes, if available. */
    public private(set) var duration: Int?

    public init(id: UUID, title: String? = nil, description: String? = nil, order: Order? = nil, users: [User]? = nil, preferenceType: PreferenceType? = nil, preferredStartAt: Date? = nil, preferredStartAtDay: Date? = nil, preferredStartAtTimeOfDay: PreferredStartAtTimeOfDay? = nil, duration: Int? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.order = order
        self.users = users
        self.preferenceType = preferenceType
        self.preferredStartAt = preferredStartAt
        self.preferredStartAtDay = preferredStartAtDay
        self.preferredStartAtTimeOfDay = preferredStartAtTimeOfDay
        self.duration = duration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case description
        case order
        case users
        case preferenceType = "preference_type"
        case preferredStartAt = "preferred_start_at"
        case preferredStartAtDay = "preferred_start_at_day"
        case preferredStartAtTimeOfDay = "preferred_start_at_time_of_day"
        case duration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encodeIfPresent(preferenceType, forKey: .preferenceType)
        try container.encodeIfPresent(preferredStartAt, forKey: .preferredStartAt)
        try container.encodeIfPresent(preferredStartAtDay, forKey: .preferredStartAtDay)
        try container.encodeIfPresent(preferredStartAtTimeOfDay, forKey: .preferredStartAtTimeOfDay)
        try container.encodeIfPresent(duration, forKey: .duration)
    }
}

