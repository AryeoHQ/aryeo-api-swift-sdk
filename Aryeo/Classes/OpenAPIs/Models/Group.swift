//
// Group.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A collection of users that can interact with the Aryeo platform. Permissions and properties are determined based on the group&#39;s type which can be creator, agent, or brokerage. */
public struct Group: Codable, Hashable {

    public enum GroupType: String, Codable, CaseIterable {
        case creator = "creator"
        case agent = "agent"
        case brokerage = "brokerage"
    }
    /** ID of the group. */
    public var id: UUID
    /** The type of group. */
    public var groupType: GroupType
    /** The name of the group. */
    public var name: String
    /** Group logo. */
    public var logo: String?
    /** Email. */
    public var email: String?
    /** Phone number. */
    public var phone: String?
    /** Website. */
    public var website: String?
    /** Does this group represent a brokerage or an agent who belongs to a brokerage? */
    public var isBrokerageOrBrokerageAgent: Bool
    public var socialProfiles: SocialProfiles?
    public var agentProperties: GroupAgentProperties?
    /** users */
    public var users: [User]?
    public var defaultOrderForm: OrderForm?
    /** An array of order forms. */
    public var orderForms: [OrderForm]?

    public init(id: UUID, groupType: GroupType, name: String, logo: String? = nil, email: String? = nil, phone: String? = nil, website: String? = nil, isBrokerageOrBrokerageAgent: Bool, socialProfiles: SocialProfiles? = nil, agentProperties: GroupAgentProperties? = nil, users: [User]? = nil, defaultOrderForm: OrderForm? = nil, orderForms: [OrderForm]? = nil) {
        self.id = id
        self.groupType = groupType
        self.name = name
        self.logo = logo
        self.email = email
        self.phone = phone
        self.website = website
        self.isBrokerageOrBrokerageAgent = isBrokerageOrBrokerageAgent
        self.socialProfiles = socialProfiles
        self.agentProperties = agentProperties
        self.users = users
        self.defaultOrderForm = defaultOrderForm
        self.orderForms = orderForms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case groupType = "group_type"
        case name
        case logo
        case email
        case phone
        case website
        case isBrokerageOrBrokerageAgent = "is_brokerage_or_brokerage_agent"
        case socialProfiles = "social_profiles"
        case agentProperties = "agent_properties"
        case users
        case defaultOrderForm = "default_order_form"
        case orderForms = "order_forms"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(groupType, forKey: .groupType)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encode(isBrokerageOrBrokerageAgent, forKey: .isBrokerageOrBrokerageAgent)
        try container.encodeIfPresent(socialProfiles, forKey: .socialProfiles)
        try container.encodeIfPresent(agentProperties, forKey: .agentProperties)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encodeIfPresent(defaultOrderForm, forKey: .defaultOrderForm)
        try container.encodeIfPresent(orderForms, forKey: .orderForms)
    }
}

