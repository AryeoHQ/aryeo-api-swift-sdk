//
// PaginationMeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Metadata about a paginated response. */
public struct PaginationMeta: Codable, Hashable {

    /** Total number of records. */
    public var total: Int
    /** Number of records per page. */
    public var perPage: Int
    /** The current page. */
    public var currentPage: Int
    /** The last page of records. */
    public var lastPage: Int
    /** The ID of the first record on this page. This is specified as either `integer` or `null` purely for contract testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand. */
    public var from: Int?
    /** The ID of the last record on this page. This is specified as either `integer` or `null` purely for contract testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand. */
    public var to: Int?
    /** The current paged path. */
    public var path: String

    public init(total: Int, perPage: Int, currentPage: Int, lastPage: Int, from: Int? = nil, to: Int? = nil, path: String) {
        self.total = total
        self.perPage = perPage
        self.currentPage = currentPage
        self.lastPage = lastPage
        self.from = from
        self.to = to
        self.path = path
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case total
        case perPage = "per_page"
        case currentPage = "current_page"
        case lastPage = "last_page"
        case from
        case to
        case path
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(total, forKey: .total)
        try container.encode(perPage, forKey: .perPage)
        try container.encode(currentPage, forKey: .currentPage)
        try container.encode(lastPage, forKey: .lastPage)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encode(path, forKey: .path)
    }
}

