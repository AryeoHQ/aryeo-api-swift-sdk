//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A record of a person on the Aryeo platform. */
public struct User: Codable, Hashable {

    /** UUID of the user. */
    public var id: UUID
    /** Avatar. */
    public var avatar: String?
    /** Email. */
    public var email: String
    /** First name. */
    public var firstName: String?
    /** Last name. */
    public var lastName: String?
    /** Timezone. */
    public var timezone: String?
    /** Phone number. */
    public var phone: String?
    /** Describes user's relationship (access level) to a specified group. */
    public var relationship: String?

    public init(id: UUID, avatar: String? = nil, email: String, firstName: String? = nil, lastName: String? = nil, timezone: String? = nil, phone: String? = nil, relationship: String? = nil) {
        self.id = id
        self.avatar = avatar
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.timezone = timezone
        self.phone = phone
        self.relationship = relationship
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case avatar
        case email
        case firstName = "first_name"
        case lastName = "last_name"
        case timezone
        case phone
        case relationship
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(relationship, forKey: .relationship)
    }
}

