//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A record of a person on the Aryeo platform. */
public struct User: Codable {

    /** ID of the user. UUID Version 4. */
    public private(set) var id: UUID
    /** Email address of the user. */
    public private(set) var email: String
    /** First name of the user. */
    public private(set) var firstName: String?
    /** Last name of the user. */
    public private(set) var lastName: String?
    /** A phone number represented in whichever standards specified by the user, typically ###-###-#### (separated by hyphens). */
    public private(set) var phone: String?
    /** The avatar image URL of a user. */
    public private(set) var avatarUrl: String?
    /** Describes user's relationship (access level) to a specified group. Only returned if this resource is returned as a sub-resource of a group. */
    public private(set) var relationship: String?

    public init(id: UUID, email: String, firstName: String? = nil, lastName: String? = nil, phone: String? = nil, avatarUrl: String? = nil, relationship: String? = nil) {
        self.id = id
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
        self.avatarUrl = avatarUrl
        self.relationship = relationship
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case firstName = "first_name"
        case lastName = "last_name"
        case phone
        case avatarUrl = "avatar_url"
        case relationship
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(relationship, forKey: .relationship)
    }
}

