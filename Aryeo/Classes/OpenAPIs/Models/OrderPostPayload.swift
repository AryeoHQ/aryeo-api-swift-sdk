//
// OrderPostPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Payload for creating an order. */
public struct OrderPostPayload: Codable {

    public enum FulfillmentStatus: String, Codable, CaseIterable {
        case fulfilled = "FULFILLED"
        case unfulfilled = "UNFULFILLED"
    }
    public enum PaymentStatus: String, Codable, CaseIterable {
        case paid = "PAID"
        case unpaid = "UNPAID"
    }
    /** The fulfillment status of the order. Defaults to \"UNFULFILLED\". */
    public private(set) var fulfillmentStatus: FulfillmentStatus?
    /** Internal notes that will be attached to the order. Viewable only by the team. */
    public private(set) var internalNotes: String?
    /** The payment status of the order. Defaults to \"UNPAID\".  */
    public private(set) var paymentStatus: PaymentStatus?
    /** ID of the address to associate with the order. UUID Version 4. */
    public private(set) var addressId: UUID?
    /** ID of the customer to associate with the order. UUID Version 4. */
    public private(set) var customerId: UUID?

    public init(fulfillmentStatus: FulfillmentStatus? = nil, internalNotes: String? = nil, paymentStatus: PaymentStatus? = nil, addressId: UUID? = nil, customerId: UUID? = nil) {
        self.fulfillmentStatus = fulfillmentStatus
        self.internalNotes = internalNotes
        self.paymentStatus = paymentStatus
        self.addressId = addressId
        self.customerId = customerId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fulfillmentStatus = "fulfillment_status"
        case internalNotes = "internal_notes"
        case paymentStatus = "payment_status"
        case addressId = "address_id"
        case customerId = "customer_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fulfillmentStatus, forKey: .fulfillmentStatus)
        try container.encodeIfPresent(internalNotes, forKey: .internalNotes)
        try container.encodeIfPresent(paymentStatus, forKey: .paymentStatus)
        try container.encodeIfPresent(addressId, forKey: .addressId)
        try container.encodeIfPresent(customerId, forKey: .customerId)
    }
}

