//
// PartialListing.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A real-estate property. */
public struct PartialListing: Codable, Hashable {

    public enum DeliveryStatus: String, Codable, CaseIterable {
        case delivered = "delivered"
        case undelivered = "undelivered"
    }
    public enum Status: String, Codable, CaseIterable {
        case offMarket = "Off Market"
        case pendingLease = "Pending Lease"
        case vacationRental = "Vacation Rental"
        case leased = "Leased"
        case forSale = "For Sale"
        case draft = "Draft"
        case comingSoon = "Coming Soon"
        case soldm = "Soldm"
        case null = "NULL"
        case forLease = "For Lease"
        case pendingSale = "Pending Sale"
        case priceReduction = "Price Reduction"
        case sold = "Sold"
    }
    /** ID of the listing. */
    public var id: UUID
    public var address: PartialAddress
    /** Has the listing been delivered? */
    public var deliveryStatus: DeliveryStatus
    /** Thumbnail URL for the listing. */
    public var thumbnailUrl: String?
    /** The price of the property in dollars. */
    public var price: Int?
    /** URL for branded property website. */
    public var brandedUrl: String?
    /** Total number of square feet. */
    public var squareFeet: Double?
    /** Number of bedrooms. */
    public var bedrooms: Int?
    /** Number of bathrooms. */
    public var bathrooms: Double?
    /** Are downloads enabled for this listing? */
    public var downloadsEnabled: Bool
    /** Sales status for the listing. */
    public var status: Status?
    public var propertyDetails: PropertyDetails?
    public var agent: PartialGroup?
    public var coAgent: PartialGroup?

    public init(id: UUID, address: PartialAddress, deliveryStatus: DeliveryStatus, thumbnailUrl: String? = nil, price: Int? = nil, brandedUrl: String? = nil, squareFeet: Double? = nil, bedrooms: Int? = nil, bathrooms: Double? = nil, downloadsEnabled: Bool, status: Status? = nil, propertyDetails: PropertyDetails? = nil, agent: PartialGroup? = nil, coAgent: PartialGroup? = nil) {
        self.id = id
        self.address = address
        self.deliveryStatus = deliveryStatus
        self.thumbnailUrl = thumbnailUrl
        self.price = price
        self.brandedUrl = brandedUrl
        self.squareFeet = squareFeet
        self.bedrooms = bedrooms
        self.bathrooms = bathrooms
        self.downloadsEnabled = downloadsEnabled
        self.status = status
        self.propertyDetails = propertyDetails
        self.agent = agent
        self.coAgent = coAgent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case address
        case deliveryStatus = "delivery_status"
        case thumbnailUrl = "thumbnail_url"
        case price
        case brandedUrl = "branded_url"
        case squareFeet = "square_feet"
        case bedrooms
        case bathrooms
        case downloadsEnabled = "downloads_enabled"
        case status
        case propertyDetails = "property_details"
        case agent
        case coAgent = "co_agent"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(address, forKey: .address)
        try container.encode(deliveryStatus, forKey: .deliveryStatus)
        try container.encodeIfPresent(thumbnailUrl, forKey: .thumbnailUrl)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(brandedUrl, forKey: .brandedUrl)
        try container.encodeIfPresent(squareFeet, forKey: .squareFeet)
        try container.encodeIfPresent(bedrooms, forKey: .bedrooms)
        try container.encodeIfPresent(bathrooms, forKey: .bathrooms)
        try container.encode(downloadsEnabled, forKey: .downloadsEnabled)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(propertyDetails, forKey: .propertyDetails)
        try container.encodeIfPresent(agent, forKey: .agent)
        try container.encodeIfPresent(coAgent, forKey: .coAgent)
    }
}

