//
// Order.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A payment request for some content or service. */
public struct Order: Codable, Hashable {

    public enum FulfillmentStatus: String, Codable, CaseIterable {
        case fulfilled = "FULFILLED"
        case unfulfilled = "UNFULFILLED"
    }
    public enum PaymentStatus: String, Codable, CaseIterable {
        case paid = "PAID"
        case unpaid = "UNPAID"
    }
    public enum Currency: String, Codable, CaseIterable {
        case usd = "USD"
        case cad = "CAD"
        case gbp = "GBP"
        case chf = "CHF"
        case eur = "EUR"
        case aud = "AUD"
        case nzd = "NZD"
        case zar = "ZAR"
    }
    /** ID of the order. UUID Version 4. */
    public var id: UUID
    /** A vanity id used for internal tracking of orders for a given vendor. */
    public var number: Int
    /** The title of the order, generated by combining the order's number property with the prefix \"Order #\". */
    public var title: String
    /** The fulfillment status of the order. */
    public var fulfillmentStatus: FulfillmentStatus
    /** The payment status of the order. */
    public var paymentStatus: PaymentStatus
    /** The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo. */
    public var currency: Currency?
    /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes.  */
    public var totalAmount: Int?
    /** A URL of a publicly-accessible webpage to pay for the order. */
    public var paymentUrl: String?
    /** A URL of a publicly-accessible webpage to see the order's status. */
    public var statusUrl: String?
    public var address: Address?
    public var customer: Group?
    /** items */
    public var items: [OrderItem]?

    public init(id: UUID, number: Int, title: String, fulfillmentStatus: FulfillmentStatus, paymentStatus: PaymentStatus, currency: Currency? = nil, totalAmount: Int? = nil, paymentUrl: String? = nil, statusUrl: String?, address: Address? = nil, customer: Group? = nil, items: [OrderItem]? = nil) {
        self.id = id
        self.number = number
        self.title = title
        self.fulfillmentStatus = fulfillmentStatus
        self.paymentStatus = paymentStatus
        self.currency = currency
        self.totalAmount = totalAmount
        self.paymentUrl = paymentUrl
        self.statusUrl = statusUrl
        self.address = address
        self.customer = customer
        self.items = items
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case number
        case title
        case fulfillmentStatus = "fulfillment_status"
        case paymentStatus = "payment_status"
        case currency
        case totalAmount = "total_amount"
        case paymentUrl = "payment_url"
        case statusUrl = "status_url"
        case address
        case customer
        case items
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(number, forKey: .number)
        try container.encode(title, forKey: .title)
        try container.encode(fulfillmentStatus, forKey: .fulfillmentStatus)
        try container.encode(paymentStatus, forKey: .paymentStatus)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
        try container.encodeIfPresent(paymentUrl, forKey: .paymentUrl)
        try container.encode(statusUrl, forKey: .statusUrl)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(customer, forKey: .customer)
        try container.encodeIfPresent(items, forKey: .items)
    }
}

