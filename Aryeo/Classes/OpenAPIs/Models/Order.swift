//
// Order.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A payment request for some content or service. */
public struct Order: Codable, Hashable {

    public enum PaymentStatus: String, Codable, CaseIterable {
        case paid = "paid"
        case unpaid = "unpaid"
    }
    public enum FulfillmentStatus: String, Codable, CaseIterable {
        case fulfilled = "fulfilled"
        case unfulfilled = "unfulfilled"
    }
    /** ID of the order. */
    public var id: UUID
    /** A vanity id to be displayed for the order. For example, \"Order #1000\". */
    public var displayId: Int
    /** The total price of the order given in cents. */
    public var totalPriceCents: Int
    public var currency: Currency
    /** The payment status of the order. */
    public var paymentStatus: PaymentStatus
    /** A URL for to pay for the order. */
    public var paymentUrl: String?
    public var listing: PartialListing?
    /** The fulfillment status of the order. */
    public var fulfillmentStatus: FulfillmentStatus
    /** A URL to see the order's status. */
    public var statusUrl: String?

    public init(id: UUID, displayId: Int, totalPriceCents: Int, currency: Currency, paymentStatus: PaymentStatus, paymentUrl: String? = nil, listing: PartialListing? = nil, fulfillmentStatus: FulfillmentStatus, statusUrl: String? = nil) {
        self.id = id
        self.displayId = displayId
        self.totalPriceCents = totalPriceCents
        self.currency = currency
        self.paymentStatus = paymentStatus
        self.paymentUrl = paymentUrl
        self.listing = listing
        self.fulfillmentStatus = fulfillmentStatus
        self.statusUrl = statusUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case displayId = "display_id"
        case totalPriceCents = "total_price_cents"
        case currency
        case paymentStatus = "payment_status"
        case paymentUrl = "payment_url"
        case listing
        case fulfillmentStatus = "fulfillment_status"
        case statusUrl = "status_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(displayId, forKey: .displayId)
        try container.encode(totalPriceCents, forKey: .totalPriceCents)
        try container.encode(currency, forKey: .currency)
        try container.encode(paymentStatus, forKey: .paymentStatus)
        try container.encodeIfPresent(paymentUrl, forKey: .paymentUrl)
        try container.encodeIfPresent(listing, forKey: .listing)
        try container.encode(fulfillmentStatus, forKey: .fulfillmentStatus)
        try container.encodeIfPresent(statusUrl, forKey: .statusUrl)
    }
}

