//
// PartialAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A structure containing a street address and additional metadata about a location. */
public struct PartialAddress: Codable, Hashable {

    /** ID of address. */
    public var id: Int
    /** The full address string containing address_1 and address_2. */
    public var fullAddress: String?
    /** A formatted address string containing the street. */
    public var formattedAddress1: String
    /** A formatted address string containing the city, state, and zipcode. */
    public var formattedAddress2: String
    /** Latitude of the address. */
    public var latitude: Double
    /** Longitude of the address. */
    public var longitude: Double
    /** ID of place. */
    public var placeId: String?
    /** Address line 1 */
    public var addressLine1: String?
    /** Address line 2 */
    public var addressLine2: String?
    /** City */
    public var city: String?
    /** State */
    public var state: String?
    /** Postal Code */
    public var postalCode: String?

    public init(id: Int, fullAddress: String? = nil, formattedAddress1: String, formattedAddress2: String, latitude: Double, longitude: Double, placeId: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, postalCode: String? = nil) {
        self.id = id
        self.fullAddress = fullAddress
        self.formattedAddress1 = formattedAddress1
        self.formattedAddress2 = formattedAddress2
        self.latitude = latitude
        self.longitude = longitude
        self.placeId = placeId
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.city = city
        self.state = state
        self.postalCode = postalCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fullAddress = "full_address"
        case formattedAddress1 = "formatted_address_1"
        case formattedAddress2 = "formatted_address_2"
        case latitude
        case longitude
        case placeId = "place_id"
        case addressLine1 = "address_line_1"
        case addressLine2 = "address_line_2"
        case city
        case state
        case postalCode = "postal_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(fullAddress, forKey: .fullAddress)
        try container.encode(formattedAddress1, forKey: .formattedAddress1)
        try container.encode(formattedAddress2, forKey: .formattedAddress2)
        try container.encode(latitude, forKey: .latitude)
        try container.encode(longitude, forKey: .longitude)
        try container.encodeIfPresent(placeId, forKey: .placeId)
        try container.encodeIfPresent(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
    }
}

