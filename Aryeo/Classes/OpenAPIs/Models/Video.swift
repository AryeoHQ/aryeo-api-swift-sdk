//
// Video.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A recording of moving visual images. Provided either as a download URL (MP4) or a link (e.g. YouTube, Vimeo). */
public struct Video: Codable, Hashable {

    public enum DisplayType: String, Codable, CaseIterable {
        case branded = "BRANDED"
        case unbranded = "UNBRANDED"
        case both = "BOTH"
        case _none = "NONE"
    }
    public enum SourceType: String, Codable, CaseIterable {
        case youtube = "YOUTUBE"
        case vimeo = "VIMEO"
        case optimized = "OPTIMIZED"
        case uploaded = "UPLOADED"
        case link = "LINK"
    }
    /** ID of the video. UUID Version 4. */
    public var id: UUID
    /** The title of the video given by the uploading user. */
    public var title: String?
    /** The video's runtime in seconds. */
    public var duration: Int?
    /** The display type determines if the video is branded or unbranded (can also be none or both). This affects whether the video is displayed on branded or unbranded marketing materials such as the property website. */
    public var displayType: DisplayType
    /** The original upload source of the video, used to determine how to handle the playback_url of the video and other display properties.  */
    public var sourceType: SourceType
    /** A thumbnail image URL for the video. */
    public var thumbnailUrl: String
    /** A URL linking to playback stream of the video. */
    public var playbackUrl: String
    /** A URL for downloading the video. */
    public var downloadUrl: String?
    /** A URL linking to a public viewing optimized webpage the video. */
    public var shareUrl: String?

    public init(id: UUID, title: String? = nil, duration: Int? = nil, displayType: DisplayType, sourceType: SourceType, thumbnailUrl: String, playbackUrl: String, downloadUrl: String? = nil, shareUrl: String? = nil) {
        self.id = id
        self.title = title
        self.duration = duration
        self.displayType = displayType
        self.sourceType = sourceType
        self.thumbnailUrl = thumbnailUrl
        self.playbackUrl = playbackUrl
        self.downloadUrl = downloadUrl
        self.shareUrl = shareUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case duration
        case displayType = "display_type"
        case sourceType = "source_type"
        case thumbnailUrl = "thumbnail_url"
        case playbackUrl = "playback_url"
        case downloadUrl = "download_url"
        case shareUrl = "share_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encode(displayType, forKey: .displayType)
        try container.encode(sourceType, forKey: .sourceType)
        try container.encode(thumbnailUrl, forKey: .thumbnailUrl)
        try container.encode(playbackUrl, forKey: .playbackUrl)
        try container.encodeIfPresent(downloadUrl, forKey: .downloadUrl)
        try container.encodeIfPresent(shareUrl, forKey: .shareUrl)
    }
}

