//
// PropertyDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Details about a real-estate listing. */
public struct PropertyDetails: Codable, Hashable {

    public enum PropertyType: String, Codable, CaseIterable {
        case singleFamily = "Single Family"
        case singleFamilyAttached = "Single Family Attached"
        case singleFamilyDetached = "Single Family Detached"
        case colonial = "Colonial"
        case condo = "Condo"
        case townhome = "Townhome"
        case twinhome = "Twinhome"
        case duplex = "Duplex"
        case lot = "Lot"
        case land = "Land"
        case manufacturedHome = "Manufactured Home"
        case semiDetached = "Semi-Detached"
        case rental = "Rental"
        case rowHouse = "Row House"
        case horseFarm = "Horse Farm"
        case other = "Other"
    }
    /** The price of the property in dollars. */
    public var price: Int?
    /** A number assigned to a real-estate listing for the purposes of information sharing. */
    public var mlsNumber: String?
    /** Number of bedrooms. */
    public var bedrooms: Int?
    /** Number of bathrooms. Represented as a number in order to support half-baths. */
    public var bathrooms: Double?
    /** Total number of square feet. */
    public var squareFeet: Double?
    /** Total acres. */
    public var lotAcres: Double?
    /** Number of parking spaces. */
    public var parkingSpots: Int?
    /** Year the property was built. */
    public var yearBuilt: Int?
    /** Type of property. */
    public var propertyType: PropertyType?
    /** Property description. */
    public var description: String?

    public init(price: Int? = nil, mlsNumber: String? = nil, bedrooms: Int? = nil, bathrooms: Double? = nil, squareFeet: Double? = nil, lotAcres: Double? = nil, parkingSpots: Int? = nil, yearBuilt: Int? = nil, propertyType: PropertyType? = nil, description: String? = nil) {
        self.price = price
        self.mlsNumber = mlsNumber
        self.bedrooms = bedrooms
        self.bathrooms = bathrooms
        self.squareFeet = squareFeet
        self.lotAcres = lotAcres
        self.parkingSpots = parkingSpots
        self.yearBuilt = yearBuilt
        self.propertyType = propertyType
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case price
        case mlsNumber = "mls_number"
        case bedrooms
        case bathrooms
        case squareFeet = "square_feet"
        case lotAcres = "lot_acres"
        case parkingSpots = "parking_spots"
        case yearBuilt = "year_built"
        case propertyType = "property_type"
        case description
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(mlsNumber, forKey: .mlsNumber)
        try container.encodeIfPresent(bedrooms, forKey: .bedrooms)
        try container.encodeIfPresent(bathrooms, forKey: .bathrooms)
        try container.encodeIfPresent(squareFeet, forKey: .squareFeet)
        try container.encodeIfPresent(lotAcres, forKey: .lotAcres)
        try container.encodeIfPresent(parkingSpots, forKey: .parkingSpots)
        try container.encodeIfPresent(yearBuilt, forKey: .yearBuilt)
        try container.encodeIfPresent(propertyType, forKey: .propertyType)
        try container.encodeIfPresent(description, forKey: .description)
    }
}

