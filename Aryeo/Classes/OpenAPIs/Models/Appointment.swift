//
// Appointment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An appointment. */
public struct Appointment: Codable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case scheduled = "SCHEDULED"
        case unscheduled = "UNSCHEDULED"
        case rescheduled = "RESCHEDULED"
        case canceled = "CANCELED"
    }
    /** The ID of the appointment. */
    public var id: UUID
    /** The status of the appointment. */
    public var status: Status?
    /** The title of the appointment. */
    public var title: String?
    /** The multi-line description of the appointment. */
    public var description: String?
    /** The date and time (ISO 8601 format) when the appointment is set to start. */
    public var startAt: Date?
    /** The date and time (ISO 8601 format) when the appointment is set to end. */
    public var endAt: Date?
    /** The length of the appointment in minutes. */
    public var duration: Int?
    public var order: Order?
    /** Users attached to the appointment. */
    public var users: [User]?
    /** Items attached to the appointment. */
    public var items: [OrderItem]?

    public init(id: UUID, status: Status? = nil, title: String? = nil, description: String? = nil, startAt: Date? = nil, endAt: Date? = nil, duration: Int? = nil, order: Order? = nil, users: [User]? = nil, items: [OrderItem]? = nil) {
        self.id = id
        self.status = status
        self.title = title
        self.description = description
        self.startAt = startAt
        self.endAt = endAt
        self.duration = duration
        self.order = order
        self.users = users
        self.items = items
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case status
        case title
        case description
        case startAt = "start_at"
        case endAt = "end_at"
        case duration
        case order
        case users
        case items
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(startAt, forKey: .startAt)
        try container.encodeIfPresent(endAt, forKey: .endAt)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encodeIfPresent(items, forKey: .items)
    }
}

