//
// OrdersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrdersAPI {

    /**
     Get orders available to a group.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrders(apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: OrderCollection?, _ error: Error?) -> Void)) {
        getOrdersWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get orders available to a group.
     - GET /orders
     - Get orders of a group.
     - BASIC:
       - type: http
       - name: JWT
     - returns: RequestBuilder<OrderCollection> 
     */
    open class func getOrdersWithRequestBuilder() -> RequestBuilder<OrderCollection> {
        let path = "/orders"
        let URLString = Aryeo.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrderCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create an order.
     
     - parameter orderPostPayload: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrders(orderPostPayload: OrderPostPayload? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: OrderResource?, _ error: Error?) -> Void)) {
        postOrdersWithRequestBuilder(orderPostPayload: orderPostPayload).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an order.
     - POST /orders
     - Create an order.
     - BASIC:
       - type: http
       - name: JWT
     - parameter orderPostPayload: (body)  (optional)
     - returns: RequestBuilder<OrderResource> 
     */
    open class func postOrdersWithRequestBuilder(orderPostPayload: OrderPostPayload? = nil) -> RequestBuilder<OrderResource> {
        let path = "/orders"
        let URLString = Aryeo.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderPostPayload)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrderResource>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }
}
