//
// OrdersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrdersAPI {

    /**
     Get orders available to a group.
     
     - parameter sort: (query) Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrders(sort: String? = nil, perPage: String? = nil, page: String? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: OrderCollection?, _ error: Error?) -> Void)) {
        getOrdersWithRequestBuilder(sort: sort, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get orders available to a group.
     - GET /orders
     - Get orders of a group.
     - BASIC:
       - type: http
       - name: Token
     - parameter sort: (query) Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - returns: RequestBuilder<OrderCollection> 
     */
    open class func getOrdersWithRequestBuilder(sort: String? = nil, perPage: String? = nil, page: String? = nil) -> RequestBuilder<OrderCollection> {
        let localVariablePath = "/orders"
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create an order.
     
     - parameter orderPostPayload: (body) OrderPostPayload (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrders(orderPostPayload: OrderPostPayload? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: OrderResource?, _ error: Error?) -> Void)) {
        postOrdersWithRequestBuilder(orderPostPayload: orderPostPayload).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an order.
     - POST /orders
     - Create an order.
     - BASIC:
       - type: http
       - name: Token
     - parameter orderPostPayload: (body) OrderPostPayload (optional)
     - returns: RequestBuilder<OrderResource> 
     */
    open class func postOrdersWithRequestBuilder(orderPostPayload: OrderPostPayload? = nil) -> RequestBuilder<OrderResource> {
        let localVariablePath = "/orders"
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderPostPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderResource>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
