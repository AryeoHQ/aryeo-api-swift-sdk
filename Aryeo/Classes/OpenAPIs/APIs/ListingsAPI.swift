//
// ListingsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ListingsAPI {

    /**
     * enum for parameter status
     */
    public enum Status_getListings: String, CaseIterable {
        case offMarket = "off_market"
        case pendingLease = "pending_lease"
        case vacationRental = "vacation_rental"
        case leased = "leased"
        case forSale = "for_sale"
        case draft = "draft"
        case comingSoon = "coming_soon"
        case soldm = "soldm"
        case null = "null"
        case forLease = "for_lease"
        case pendingSale = "pending_sale"
        case priceReduction = "price_reduction"
        case sold = "sold"
    }

    /**
     Get the listings available to a group.
     
     - parameter query: (query) A search query. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - parameter status: (query) The status you want to scope down to, example sold,  coming_soon,  for_sale, sold (optional)
     - parameter price: (query) The price value and greater will be returned. (optional)
     - parameter bathrooms: (query) Number of bathrooms minimum. (optional)
     - parameter bedrooms: (query) Number of bedrooms minimum. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListings(query: String? = nil, perPage: String? = nil, page: String? = nil, status: Status_getListings? = nil, price: Int? = nil, bathrooms: Double? = nil, bedrooms: Int? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: PartialListingCollection?, _ error: Error?) -> Void)) {
        getListingsWithRequestBuilder(query: query, perPage: perPage, page: page, status: status, price: price, bathrooms: bathrooms, bedrooms: bedrooms).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the listings available to a group.
     - GET /listings
     - Get the listings available to a group.
     - BASIC:
       - type: http
       - name: JWT
     - parameter query: (query) A search query. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - parameter status: (query) The status you want to scope down to, example sold,  coming_soon,  for_sale, sold (optional)
     - parameter price: (query) The price value and greater will be returned. (optional)
     - parameter bathrooms: (query) Number of bathrooms minimum. (optional)
     - parameter bedrooms: (query) Number of bedrooms minimum. (optional)
     - returns: RequestBuilder<PartialListingCollection> 
     */
    open class func getListingsWithRequestBuilder(query: String? = nil, perPage: String? = nil, page: String? = nil, status: Status_getListings? = nil, price: Int? = nil, bathrooms: Double? = nil, bedrooms: Int? = nil) -> RequestBuilder<PartialListingCollection> {
        let path = "/listings"
        let URLString = Aryeo.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "price": price?.encodeToJSON(),
            "bathrooms": bathrooms?.encodeToJSON(),
            "bedrooms": bedrooms?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PartialListingCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get information about a listing.
     
     - parameter uuid: (path) The UUID of a listing. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListingsId(uuid: UUID, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: ListingResource?, _ error: Error?) -> Void)) {
        getListingsIdWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a listing.
     - GET /listings/{uuid}
     - Get information about a listing.
     - BASIC:
       - type: http
       - name: JWT
     - parameter uuid: (path) The UUID of a listing. 
     - returns: RequestBuilder<ListingResource> 
     */
    open class func getListingsIdWithRequestBuilder(uuid: UUID) -> RequestBuilder<ListingResource> {
        var path = "/listings/{uuid}"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let URLString = Aryeo.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ListingResource>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }
}
