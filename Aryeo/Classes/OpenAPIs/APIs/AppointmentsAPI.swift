//
// AppointmentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppointmentsAPI {

    /**
     * enum for parameter filterTense
     */
    public enum FilterTense_getAppointments: String, CaseIterable {
        case past = "PAST"
        case upcoming = "UPCOMING"
    }

    /**
     List all appointments.
     
     - parameter include: (query) Comma separated list of optional data to include in the response. (optional)
     - parameter filterTense: (query) Return appointments that are upcoming or in the past. (optional)
     - parameter filterStartAtGte: (query) Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     - parameter filterStartAtLte: (query) Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     - parameter filterUserIds: (query) The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     - parameter sort: (query) Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointments(include: String? = nil, filterTense: FilterTense_getAppointments? = nil, filterStartAtGte: Date? = nil, filterStartAtLte: Date? = nil, filterUserIds: [UUID]? = nil, sort: String? = nil, perPage: String? = nil, page: String? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: AppointmentCollection?, _ error: Error?) -> Void)) {
        getAppointmentsWithRequestBuilder(include: include, filterTense: filterTense, filterStartAtGte: filterStartAtGte, filterStartAtLte: filterStartAtLte, filterUserIds: filterUserIds, sort: sort, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all appointments.
     - GET /appointments
     - List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled
     - BASIC:
       - type: http
       - name: Token
     - parameter include: (query) Comma separated list of optional data to include in the response. (optional)
     - parameter filterTense: (query) Return appointments that are upcoming or in the past. (optional)
     - parameter filterStartAtGte: (query) Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     - parameter filterStartAtLte: (query) Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     - parameter filterUserIds: (query) The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     - parameter sort: (query) Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - returns: RequestBuilder<AppointmentCollection> 
     */
    open class func getAppointmentsWithRequestBuilder(include: String? = nil, filterTense: FilterTense_getAppointments? = nil, filterStartAtGte: Date? = nil, filterStartAtLte: Date? = nil, filterUserIds: [UUID]? = nil, sort: String? = nil, perPage: String? = nil, page: String? = nil) -> RequestBuilder<AppointmentCollection> {
        let localVariablePath = "/appointments"
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include?.encodeToJSON(),
            "filter[tense]": filterTense?.encodeToJSON(),
            "filter[start_at_gte]": filterStartAtGte?.encodeToJSON(),
            "filter[start_at_lte]": filterStartAtLte?.encodeToJSON(),
            "filter[user_ids]": filterUserIds?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppointmentCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter filterTimeframe
     */
    public enum FilterTimeframe_getAvailableDates: String, CaseIterable {
    }

    /**
     Fetch available days for a user or group
     
     - parameter filterUserIds: (query) The IDs of users whose availability will be retrieved. UUID Version 4. (optional)
     - parameter filterAppointmentId: (query) Appointment ID used to fetch availability for an existing order (optional)
     - parameter filterStartAt: (query) Returns availability after start_at (optional)
     - parameter filterEndAt: (query) Returns availability before end_at (optional)
     - parameter filterTimeframe: (query) Returns availability for a specific timeframe. Used instead of start_at &amp; end_at (optional)
     - parameter duration: (query) Duration of the event to schedule. Required if appointment_id isn&#39;t specified (optional)
     - parameter interval: (query) Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn&#39;t specified (optional)
     - parameter timezone: (query) Timezone of the client. Localizes the available days (optional)
     - parameter page: (query) The requested page of results (optional)
     - parameter perPage: (query) The number of results per page. Only applies when using a date range (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailableDates(filterUserIds: [UUID]? = nil, filterAppointmentId: String? = nil, filterStartAt: Date? = nil, filterEndAt: Date? = nil, filterTimeframe: [String]? = nil, duration: Int? = nil, interval: Int? = nil, timezone: String? = nil, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: CalendarDayCollection?, _ error: Error?) -> Void)) {
        getAvailableDatesWithRequestBuilder(filterUserIds: filterUserIds, filterAppointmentId: filterAppointmentId, filterStartAt: filterStartAt, filterEndAt: filterEndAt, filterTimeframe: filterTimeframe, duration: duration, interval: interval, timezone: timezone, page: page, perPage: perPage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch available days for a user or group
     - GET /scheduling/available-dates
     - Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     - BASIC:
       - type: http
       - name: Token
     - parameter filterUserIds: (query) The IDs of users whose availability will be retrieved. UUID Version 4. (optional)
     - parameter filterAppointmentId: (query) Appointment ID used to fetch availability for an existing order (optional)
     - parameter filterStartAt: (query) Returns availability after start_at (optional)
     - parameter filterEndAt: (query) Returns availability before end_at (optional)
     - parameter filterTimeframe: (query) Returns availability for a specific timeframe. Used instead of start_at &amp; end_at (optional)
     - parameter duration: (query) Duration of the event to schedule. Required if appointment_id isn&#39;t specified (optional)
     - parameter interval: (query) Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn&#39;t specified (optional)
     - parameter timezone: (query) Timezone of the client. Localizes the available days (optional)
     - parameter page: (query) The requested page of results (optional)
     - parameter perPage: (query) The number of results per page. Only applies when using a date range (optional)
     - returns: RequestBuilder<CalendarDayCollection> 
     */
    open class func getAvailableDatesWithRequestBuilder(filterUserIds: [UUID]? = nil, filterAppointmentId: String? = nil, filterStartAt: Date? = nil, filterEndAt: Date? = nil, filterTimeframe: [String]? = nil, duration: Int? = nil, interval: Int? = nil, timezone: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<CalendarDayCollection> {
        let localVariablePath = "/scheduling/available-dates"
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[user_ids]": filterUserIds?.encodeToJSON(),
            "filter[appointment_id]": filterAppointmentId?.encodeToJSON(),
            "filter[start_at]": filterStartAt?.encodeToJSON(),
            "filter[end_at]": filterEndAt?.encodeToJSON(),
            "filter[timeframe]": filterTimeframe?.encodeToJSON(),
            "duration": duration?.encodeToJSON(),
            "interval": interval?.encodeToJSON(),
            "timezone": timezone?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CalendarDayCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter filterTimeframe
     */
    public enum FilterTimeframe_getAvailableTimeslots: String, CaseIterable {
    }

    /**
     Fetch available timeslots for a user or group
     
     - parameter filterUserIds: (query) The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     - parameter filterAppointmentId: (query) Appointment ID used to fetch availability for an existing order (optional)
     - parameter filterStartAt: (query) Returns availability after start_at (optional)
     - parameter filterEndAt: (query) Returns availability before end_at (optional)
     - parameter filterTimeframe: (query) Returns availability for a specific timeframe. Used instead of start_at &amp; end_at (optional)
     - parameter duration: (query) Duration of the event to schedule. Required if appointment_id isn&#39;t specified (optional)
     - parameter interval: (query) Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn&#39;t specified (optional)
     - parameter page: (query) The requested page of results (optional)
     - parameter perPage: (query) The number of results per page. Only applies when using a date range (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailableTimeslots(filterUserIds: [UUID]? = nil, filterAppointmentId: String? = nil, filterStartAt: Date? = nil, filterEndAt: Date? = nil, filterTimeframe: [String]? = nil, duration: Int? = nil, interval: Int? = nil, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: TimeslotCollection?, _ error: Error?) -> Void)) {
        getAvailableTimeslotsWithRequestBuilder(filterUserIds: filterUserIds, filterAppointmentId: filterAppointmentId, filterStartAt: filterStartAt, filterEndAt: filterEndAt, filterTimeframe: filterTimeframe, duration: duration, interval: interval, page: page, perPage: perPage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch available timeslots for a user or group
     - GET /scheduling/available-timeslots
     - Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through days or weeks.
     - BASIC:
       - type: http
       - name: Token
     - parameter filterUserIds: (query) The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     - parameter filterAppointmentId: (query) Appointment ID used to fetch availability for an existing order (optional)
     - parameter filterStartAt: (query) Returns availability after start_at (optional)
     - parameter filterEndAt: (query) Returns availability before end_at (optional)
     - parameter filterTimeframe: (query) Returns availability for a specific timeframe. Used instead of start_at &amp; end_at (optional)
     - parameter duration: (query) Duration of the event to schedule. Required if appointment_id isn&#39;t specified (optional)
     - parameter interval: (query) Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn&#39;t specified (optional)
     - parameter page: (query) The requested page of results (optional)
     - parameter perPage: (query) The number of results per page. Only applies when using a date range (optional)
     - returns: RequestBuilder<TimeslotCollection> 
     */
    open class func getAvailableTimeslotsWithRequestBuilder(filterUserIds: [UUID]? = nil, filterAppointmentId: String? = nil, filterStartAt: Date? = nil, filterEndAt: Date? = nil, filterTimeframe: [String]? = nil, duration: Int? = nil, interval: Int? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<TimeslotCollection> {
        let localVariablePath = "/scheduling/available-timeslots"
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[user_ids]": filterUserIds?.encodeToJSON(),
            "filter[appointment_id]": filterAppointmentId?.encodeToJSON(),
            "filter[start_at]": filterStartAt?.encodeToJSON(),
            "filter[end_at]": filterEndAt?.encodeToJSON(),
            "filter[timeframe]": filterTimeframe?.encodeToJSON(),
            "duration": duration?.encodeToJSON(),
            "interval": interval?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TimeslotCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List all unconfirmed appointments.
     
     - parameter include: (query) Comma separated list of optional data to include in the response. (optional)
     - parameter filterUserIds: (query) The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     - parameter sort: (query) Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUnconfirmedAppointments(include: String? = nil, filterUserIds: [UUID]? = nil, sort: String? = nil, perPage: String? = nil, page: String? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: UnconfirmedAppointmentCollection?, _ error: Error?) -> Void)) {
        getUnconfirmedAppointmentsWithRequestBuilder(include: include, filterUserIds: filterUserIds, sort: sort, perPage: perPage, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all unconfirmed appointments.
     - GET /unconfirmed-appointments
     - List all unconfirmed appointments. These are appointments that have not been scheduled. 
     - BASIC:
       - type: http
       - name: Token
     - parameter include: (query) Comma separated list of optional data to include in the response. (optional)
     - parameter filterUserIds: (query) The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     - parameter sort: (query) Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     - parameter perPage: (query) The number of items per page. Defaults to 25. (optional)
     - parameter page: (query) The requested page. Defaults to 1. (optional)
     - returns: RequestBuilder<UnconfirmedAppointmentCollection> 
     */
    open class func getUnconfirmedAppointmentsWithRequestBuilder(include: String? = nil, filterUserIds: [UUID]? = nil, sort: String? = nil, perPage: String? = nil, page: String? = nil) -> RequestBuilder<UnconfirmedAppointmentCollection> {
        let localVariablePath = "/unconfirmed-appointments"
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include?.encodeToJSON(),
            "filter[user_ids]": filterUserIds?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnconfirmedAppointmentCollection>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Retrieve an unconfirmed appointment.
     
     - parameter unconfirmedAppointmentId: (path) The ID of an appointment. 
     - parameter include: (query) Comma separated list of optional data to include in the response. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUnconfirmedAppointmentsId(unconfirmedAppointmentId: UUID, include: String? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: UnconfirmedAppointmentResource?, _ error: Error?) -> Void)) {
        getUnconfirmedAppointmentsIdWithRequestBuilder(unconfirmedAppointmentId: unconfirmedAppointmentId, include: include).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an unconfirmed appointment.
     - GET /unconfirmed-appointments/{unconfirmed_appointment_id}
     - Retrieves the details of an unconfirmed appointment with the given ID.
     - BASIC:
       - type: http
       - name: Token
     - parameter unconfirmedAppointmentId: (path) The ID of an appointment. 
     - parameter include: (query) Comma separated list of optional data to include in the response. (optional)
     - returns: RequestBuilder<UnconfirmedAppointmentResource> 
     */
    open class func getUnconfirmedAppointmentsIdWithRequestBuilder(unconfirmedAppointmentId: UUID, include: String? = nil) -> RequestBuilder<UnconfirmedAppointmentResource> {
        var localVariablePath = "/unconfirmed-appointments/{unconfirmed_appointment_id}"
        let unconfirmedAppointmentIdPreEscape = "\(APIHelper.mapValueToPathItem(unconfirmedAppointmentId))"
        let unconfirmedAppointmentIdPostEscape = unconfirmedAppointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{unconfirmed_appointment_id}", with: unconfirmedAppointmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnconfirmedAppointmentResource>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Cancel an appointment.
     
     - parameter appointmentId: (path) The ID of an appointment. 
     - parameter appointmentCancelPutPayload: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAppointmentsAppointmentIdCancel(appointmentId: UUID, appointmentCancelPutPayload: AppointmentCancelPutPayload? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: AppointmentResource?, _ error: Error?) -> Void)) {
        putAppointmentsAppointmentIdCancelWithRequestBuilder(appointmentId: appointmentId, appointmentCancelPutPayload: appointmentCancelPutPayload).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel an appointment.
     - PUT /appointments/{appointment_id}/cancel
     - Cancel an appointment. The appointments order's customer can be optionally notified of this change. 
     - BASIC:
       - type: http
       - name: Token
     - parameter appointmentId: (path) The ID of an appointment. 
     - parameter appointmentCancelPutPayload: (body)  (optional)
     - returns: RequestBuilder<AppointmentResource> 
     */
    open class func putAppointmentsAppointmentIdCancelWithRequestBuilder(appointmentId: UUID, appointmentCancelPutPayload: AppointmentCancelPutPayload? = nil) -> RequestBuilder<AppointmentResource> {
        var localVariablePath = "/appointments/{appointment_id}/cancel"
        let appointmentIdPreEscape = "\(APIHelper.mapValueToPathItem(appointmentId))"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appointment_id}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appointmentCancelPutPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppointmentResource>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Reschedule an appointment.
     
     - parameter appointmentId: (path) The ID of an appointment. 
     - parameter appointmentReschedulePutPayload: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAppointmentsAppointmentIdReschedule(appointmentId: UUID, appointmentReschedulePutPayload: AppointmentReschedulePutPayload? = nil, apiResponseQueue: DispatchQueue = Aryeo.apiResponseQueue, completion: @escaping ((_ data: AppointmentResource?, _ error: Error?) -> Void)) {
        putAppointmentsAppointmentIdRescheduleWithRequestBuilder(appointmentId: appointmentId, appointmentReschedulePutPayload: appointmentReschedulePutPayload).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reschedule an appointment.
     - PUT /appointments/{appointment_id}/reschedule
     - Reschedule an appointment. The appointments order's customer can be optionally notified of this change. 
     - BASIC:
       - type: http
       - name: Token
     - parameter appointmentId: (path) The ID of an appointment. 
     - parameter appointmentReschedulePutPayload: (body)  (optional)
     - returns: RequestBuilder<AppointmentResource> 
     */
    open class func putAppointmentsAppointmentIdRescheduleWithRequestBuilder(appointmentId: UUID, appointmentReschedulePutPayload: AppointmentReschedulePutPayload? = nil) -> RequestBuilder<AppointmentResource> {
        var localVariablePath = "/appointments/{appointment_id}/reschedule"
        let appointmentIdPreEscape = "\(APIHelper.mapValueToPathItem(appointmentId))"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appointment_id}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Aryeo.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appointmentReschedulePutPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppointmentResource>.Type = Aryeo.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
